name: AI Image Studio CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'modules/ai-image-studio/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'modules/ai-image-studio/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd modules/ai-image-studio
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Lint with flake8
      run: |
        cd modules/ai-image-studio
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run unit tests
      run: |
        cd modules/ai-image-studio
        python -m pytest test_system.py -v --cov=. --cov-report=xml --cov-report=html
      env:
        PYTHONPATH: .
    
    - name: Run integration tests
      run: |
        cd modules/ai-image-studio
        python test_system.py
      env:
        PYTHONPATH: .
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: modules/ai-image-studio/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security scan
      run: |
        cd modules/ai-image-studio
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        cd modules/ai-image-studio
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          modules/ai-image-studio/bandit-report.json
          modules/ai-image-studio/safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd modules/ai-image-studio
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv libgl1-mesa-glx
    
    - name: Run performance benchmarks
      run: |
        cd modules/ai-image-studio
        python -c "
        from test_system import run_performance_tests
        import json
        results = run_performance_tests()
        with open('performance-results.json', 'w') as f:
            json.dump(results, f, indent=2)
        print('Performance test completed')
        "
      env:
        PYTHONPATH: .
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: modules/ai-image-studio/performance-results.json

  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Create package structure
      run: |
        cd modules/ai-image-studio
        mkdir -p dist
        
        # Create setup.py for packaging
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        setup(
            name="ai-image-studio",
            version="1.0.0",
            description="Advanced AI image generation automation system",
            packages=find_packages(),
            install_requires=[
                line.strip() for line in open('requirements.txt').readlines()
                if line.strip() and not line.startswith('#')
            ],
            python_requires=">=3.8",
            entry_points={
                'console_scripts': [
                    'ai-studio=ai_studio_cli:main',
                ],
            },
        )
        EOF
    
    - name: Build package
      run: |
        cd modules/ai-image-studio
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-distributions
        path: modules/ai-image-studio/dist/

  docker-build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create Dockerfile
      run: |
        cd modules/ai-image-studio
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            libopencv-dev \
            python3-opencv \
            libgl1-mesa-glx \
            libglib2.0-0 \
            && rm -rf /var/lib/apt/lists/*
        
        # Set working directory
        WORKDIR /app
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Create necessary directories
        RUN mkdir -p generated analysis config logs
        
        # Set environment variables
        ENV PYTHONPATH=/app
        ENV PYTHONUNBUFFERED=1
        
        # Expose port for web interface (if added in future)
        EXPOSE 8000
        
        # Default command
        CMD ["python", "ai_studio_cli.py", "--help"]
        EOF
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        cd modules/ai-image-studio
        docker build -t ai-image-studio:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm ai-image-studio:latest python -c "
        import prompt_engine, image_analyzer, ai_studio_cli
        print('Docker image test passed - all modules importable')
        "

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install documentation tools
      run: |
        pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Generate documentation
      run: |
        cd modules/ai-image-studio
        
        # Create mkdocs.yml
        cat > mkdocs.yml << 'EOF'
        site_name: AI Image Studio Documentation
        site_description: Advanced AI image generation automation system
        
        theme:
          name: material
          palette:
            primary: blue
            accent: cyan
        
        nav:
          - Home: index.md
          - User Guide: 
            - Getting Started: user-guide/getting-started.md
            - CLI Reference: user-guide/cli-reference.md
            - Configuration: user-guide/configuration.md
          - API Reference:
            - Prompt Engine: api/prompt-engine.md
            - Image Analyzer: api/image-analyzer.md
            - Scheduler: api/scheduler.md
            - Monitoring: api/monitoring.md
          - Integration:
            - AI Council: integration/ai-council.md
            - Cafe24: integration/cafe24.md
        
        plugins:
          - search
          - mkdocstrings:
              handlers:
                python:
                  options:
                    docstring_style: google
        EOF
        
        # Create basic documentation structure
        mkdir -p docs/{user-guide,api,integration}
        
        # Generate API documentation
        python -c "
        import inspect
        from pathlib import Path
        
        # Import modules
        modules = {
            'prompt_engine': __import__('prompt_engine'),
            'image_analyzer': __import__('image_analyzer'),
            'scheduler': __import__('scheduler'),
            'monitoring': __import__('monitoring')
        }
        
        for name, module in modules.items():
            doc_content = f'''# {name.replace('_', ' ').title()}
        
        ::: {name}
        '''
            Path(f'docs/api/{name.replace('_', '-')}.md').write_text(doc_content)
        
        # Create index
        Path('docs/index.md').write_text('''# AI Image Studio
        
        Advanced AI image generation automation system with multi-platform support,
        quality analysis, and intelligent optimization.
        
        ## Features
        
        - Advanced prompt engineering with templates
        - Multi-modal image quality analysis
        - Automated workflow scheduling
        - Real-time monitoring and alerting
        - AI Council integration for collaborative optimization
        - Cafe24 e-commerce integration
        
        ## Quick Start
        
        ```bash
        # Generate single image
        python ai_studio_cli.py generate --product \"Korean BBQ\" --platform midjourney
        
        # Batch processing
        python ai_studio_cli.py batch --input products.csv --platforms midjourney,dalle
        
        # Analyze existing image
        python ai_studio_cli.py analyze --image path/to/image.jpg
        ```
        
        ## Architecture
        
        The system consists of several key components:
        
        1. **Prompt Engine**: Generates and optimizes prompts for AI image generation
        2. **Image Analyzer**: Analyzes image quality and provides feedback
        3. **Scheduler**: Manages automated workflows and batch processing
        4. **Monitoring**: Real-time system monitoring and alerting
        5. **AI Council Integration**: Collaborative optimization using multiple AI agents
        ''')
        "
    
    - name: Build documentation
      run: |
        cd modules/ai-image-studio
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: modules/ai-image-studio/site

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test, build-and-package]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success'
      run: |
        echo "✅ AI Image Studio CI/CD pipeline completed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security-scan.result }}"
        echo "- Performance: ${{ needs.performance-test.result }}"
        echo "- Build: ${{ needs.build-and-package.result }}"
    
    - name: Notify on failure
      if: contains(needs.*.result, 'failure')
      run: |
        echo "❌ AI Image Studio CI/CD pipeline failed!"
        echo "Please check the failed jobs and fix the issues."
        exit 1